# JDBC(Java DataBase Connectivity)

	- JDBC는 DB에 접근할 수 있도록 Java에서 제공하는 API
	
	- JDBC는 DB에서 자료를 쿼리하거나 업데이트 하는 방법을 제공
	
	- JDBC API의 문제점
		1. 쿼리를 실행하기 전과 후에 많은 양의 코드를 작성
			예)오라클 드라이버 로딩, DB와 연결 생성, 명령문(쿼리문),
				ResultSet 객체 연결, 연결 객체 단기 등등
		2. DB 로직에서 예외 처리 코드 수행
		3. 1과 2의 코드를 메서드 호출 시 마다 반복적으로 작성
		
# Spring JDBCTemplate?
	- JDBCTemplate은 Spring JDBC 접근 방법 중 하나
	- 내부적으로 JDBC API를 사용하지만 위 내용의 문제점을 제거한 형태로 Spring에서 제공하는 클래스
	
	※ Spring JDBC가 하는 일
		- Connenction 열기와 닫기
		- PreparedStatement 준비와 닫기
		- PreparedStatement 실행
		- ResultSet Loop 처리
		- Exception(예외) 처리
		- Transaction 처리
	
	- Spring JDBC에서 개발자가 할 일은 핵심적으로 해야 할 작업만 해 주면
	    나머지는 Spring Framework에서 알아서 처리해 줌.
	   
# DataSource?
	- DataSource는 JDBC 명세서의 일부분이면서 일반적으로 DB 연결 공장
	     즉, DB와 관련된 Connection(DBCP 방식) 정보를 담고 있음
	  * DB 종류 (oracle.jdbc.driver.OracleDriver)
	  * url 정보 (jdbc:oracle:thin:@localhost:1521/xepdb1)
	  * 계정 정보 (web)
	  * 계정 비밀번호 정보(1234)
	  
# Spring JDBCTemplate 클래스를 사용하기 위해서는 pom.xml 파일에
	아래와 같은 라이브러리를 등록해 주어야 함.
	
	* spring-jdbc 라이브러리
	