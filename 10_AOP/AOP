# AOP(Aspect Oriented Programming : 관점 지향 프로그래밍)
	- 기존의 OOP(Object Oriented Programming : 객체 지향 프로그래밍)를 보완한 개념
		==> 핵심사항과 공통관심사항을 분리하여 구현
	
	- 문제를 바라보는 관점을 기준으로 프로그래밍을 하는 기법을 말함
	
	- AOP는 문제를 해결하기 위한 핵심 사항과 코드 전체에 적용되는 공통 관심 사항을 기준으로
		프로그래밍함으로써 공통 모듈을 여러 코드에 쉽게 적용할 수 있도록 도와줌.
	
	- AOP는 핵심 사항(primary(core) concern)과 공통 관심 사항(cross-cutting concern)을
		별도의 코드로 구현해서 최종적으로 이 둘을 조합하여 완성하는 것을 말함.

# AOP의 장점
	- 전체 코드에 흩어져 있는 공통 관심 사항이 하나의 장소에 집중(응집)이 된다는 점.
	- 서비스 모듈이 자신의 주요 관심 사항(핵심 사항)에 대한 코드만 집중하고, 그 외의
	공통 관심 사항은 모두 빠지므로 코드가 깔끔해 진다는 점.
	
# AOP 주요 용어 - 매우 중요
	- 핵심 관심 사항 : 비지니스 로직(주된 업무)
	- 공통 관심 사항 : 부가적인 업무(보조 업무) - 횡단 관심 사항
				   공통 관심 사항은 누군가에 맡겨 버리는 것이 좋다.
	- code : 핵심 관심 사항을 구현한 내용
	- advice : 공통 관심 사항을 구현한 코드
			       공통 관심 사항 내용을 정의하고 언제 그 작업을 수행할지를 정의하는 것을 말함 
			       즉, 언제 공통 관심 기능을 핵심 로직에 적용할 지를 정의하고 있어야 함.
    - aspect : 무엇을 언제 어디서 할지 즉, 필요한 정보가 정의되어 있음.
    		       즉, 여러 객체에 공통으로 적용되고 있는 공통 관심사항을 말함
    		       트랜잭션이나 보안, 로그 등이 좋은 예임. ==> advice + pointcut
    - joinpoint : advice가 적용될 위치(메서드 호출).
    			  code와 advice를 연결해 주는 설정 정보를 말함.
    - pointcut : joinpoint의 부분집합으로서 실제 advice가 적용되는 joinpoint를 말함
    			  스프링에서는 정규 표현식이나 aspectj 문법을 이용하여 정의함.
    - weaving : code, advice, pointcut 등을 조합해서 애플리케이션을 만들어 가는 과정.
    
# 스프링은 자체적인 프록시(대행) 기반의 AOP를 지원
	- 스프링은 공통관심사항(aspect)의 적용 대상이 되는 객체에 프록시를 만들어서 제공을 하며,
	대상 객체를 사용하는 코드는 대상 객체에 직접 접근하기 보다는 프록시를 통해서 간접적으로 접근을 함.
	
# 스프링에서 AOP를 구현하는 방법
	- 설정 파일을 이용하는 방법(xml 기반의 구현 방법)
	- 애노테이션을 이용하는 방법(@AspectJ 애노테이션 기반의 AOP 구현)
	
	- 스프링 AOP 사용 시 필요한 라이브러리 등록(pom.xml)
	* artifactId 가 aspectjweaver인 라이브러리를 틍록해야 함.
	
	- 스프링 AOP 프록시 사용 시 필요한 라이브러리 등록(pom.xml)
	* artifactId 가 cglib인 라이브러리를 등록해야 함.
	
	- 공통 기능 클래스 제작 - Advice 역할을 하는 클래스.
	
# xml(설정 파일을 이용하는 방법) 파일에서 advice 종류
	- <aop:before> : 핵심 기능이 실행되기 전에 advice(공통관심사항)를 실행
	- <aop:after-returning> : 정상적으로 핵심 기능이 실행된 후에 advice(공통관심사항)를 실행.
							     모든 실행이 정상적으로 이루어진 후에 동작하는 코드
	- <aop:after-throwing> : 핵심 기능 실행 중에 Exception이 발생 시 advice(공통관심사항)를 실행.
							   예외가 발생한 후에 동작하는 코드임.
	- <aop:after> : 핵심 기능 실행 후에 advice(공통관심사항)를 실행 ==> Exception이 발생하더라도
					정상적으로 실행되거나 예외가 발생했을 때 구분 없이 실행되는 코드임.
	- <aop:around> : 핵심 기능 실행 전 / 후 및 Exception 발생 시 advice(공통관심사항)를 실행 ==> 가장 많이 사용
	
# Aspect pointcut 표현식
	- pointcut을 지정할 때 사용하는 표현식으로 AspectJ 문법을 사용
	  pointcout으로 표현할 수 있는 명시자에는 여러 종류가 있지만 일반적으로 가장 많이 사용하는 명시자는
	  execution 명시자임. 그 외에도 within, bean 명시자가 있음.
	  
	  - execution 명시자 : advice를 적용할 메서드를 명시할 때 사용함.
	  
	  	- * : 모든
	  	- . : 현재
	  	- .. : 0개 이상
	  	
	  예시)
	  	* execution(public void get*(..))
	  		==> public void 이고, 메서드 이름이 get으로 시작하는 메서드이고, 인자가 있는 경우.
  		
  		* execution(* com.test.aop.*.*())
  			==> com.test.aop 패키지의 모든 클래스에 파라미터(인자)가 없는 메서드
  			
  		* execution(* com.test.aop..*.*())
  			==> com.test.aop 패키지 및 com.test.aop 패키지의 하위 패키지의 모든 클래스의 파라미터(인자)가 없는 모든 메서드
  			
		* execution(* com.test.aop.Staff.*())
			==> com.test.aop 패키지 안의 Staff 클래스 안에 파라미터(인자)가 없는 모든 메서드	
			     